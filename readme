# Feedback Collection System

A full-stack web application for collecting and managing user feedback, built with React.js frontend and Node.js/Express backend with MongoDB database.

## 🚀 Features

- **Submit Feedback**: Users can submit feedback with their name and message
- **View Feedback**: All submitted feedback is displayed in real-time
- **Delete Feedback**: Admin can delete inappropriate or outdated feedback
- **Responsive Design**: Beautiful UI with Tailwind CSS styling
- **Real-time Updates**: Instant feedback display without page refresh

## 🛠️ Tech Stack

**Frontend:**

- React.js 18
- Tailwind CSS
- Axios for API calls

**Backend:**

- Node.js
- Express.js
- MongoDB with Mongoose
- CORS enabled

## 📋 Prerequisites

Before running this application, make sure you have:

- Node.js (v14 or higher)
- npm or yarn
- MongoDB Atlas account or local MongoDB installation

## 🔧 Installation & Setup

### 1. Clone the repository

```bash
git clone <your-repository-url>
cd "feedback system"
```

### 2. Backend Setup

```bash
cd server
npm install
```

Create a `.env` file in the server directory (optional - currently using hardcoded MongoDB URI):

```
MONGODB_URI=your_mongodb_connection_string
PORT=5000
```

### 3. Frontend Setup

```bash
cd client
npm install
```

## 🚀 Running the Application

### Start the Backend Server

```bash
cd server
npm run dev
# or
npm start
```

Server will run on `http://localhost:5000`

### Start the Frontend Application

```bash
cd client
npm start
```

Frontend will run on `http://localhost:3000`

## 📁 Project Structure

```
feedback system/
├── client/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.jsx          # Main React component
│   │   ├── index.jsx        # React entry point
│   │   └── index.css        # Tailwind CSS imports
│   ├── package.json
│   └── tailwind.config.js
└── server/
    ├── index.js             # Express server & API routes
    └── package.json
```

## 🔌 API Endpoints

### GET `/api/feedback`

- Retrieves all feedback entries
- Returns feedback sorted by date (newest first)

### POST `/api/feedback`

- Creates a new feedback entry
- Required fields: `name`, `message`

### DELETE `/api/feedback/:id`

- Deletes a specific feedback entry by ID

## 💾 Database Schema

**Feedback Collection:**

```javascript
{
  name: String,
  message: String,
  date: { type: Date, default: Date.now }
}
```

## 🎨 UI Features

- **Gradient Background**: Beautiful blue to purple gradient
- **Responsive Cards**: Clean feedback display cards
- **Interactive Forms**: Styled input fields with focus states
- **Hover Effects**: Smooth transitions and shadows
- **Delete Functionality**: Easy feedback management

## 🔒 Security Considerations

⚠️ **Important**: This is a demo application. For production use:

- Add authentication and authorization
- Implement input validation and sanitization
- Use environment variables for sensitive data
- Add rate limiting
- Implement proper error handling
- Use HTTPS

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## 📝 License

This project is open source and available under the [MIT License](LICENSE).

## 📞 Support

If you have any questions or run into issues, please create an issue in the repository.

---

**Happy Coding! 🚀**
